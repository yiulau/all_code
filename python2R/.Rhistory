max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
.self$value<<-node_value
.self$neighbors<<-vector("list",max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(neighbors[[cur]])){
.self$neighbors[[cur]]<<-node_obj
}else{
cur=cur+1
}
}
node_obj$add_neighbors(.self)
}
)
a=node$new(node_value=4)
a
b=node$new(node_value=5)
a$add_neighbors(b)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(neighbors[[cur]])){
.self$neighbors[[cur]]<-node_obj
}else{
cur=cur+1
}
}
node_obj$add_neighbors(.self)
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(neighbors[[cur]])){
.self$neighbors[[cur]]<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
a
b$add_neighbors(a)
b
node=setRefClass("node",fields=list(neighbors="list",value="numeric",
max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
.self$value<<-node_value
.self$neighbors<<-vector("list",max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(neighbors[[cur]])){
.self$neighbors[[cur]]<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
b$add_neighbors(a)
b
b$neighbors
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(.self$neighbors[[cur]])){
.self$neighbors[[cur]]<-node_obj
}else{
cur=cur+1
}
}
}
)
node=setRefClass("node",fields=list(neighbors="list",value="numeric",
max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
.self$value<<-node_value
.self$neighbors<<-vector("list",max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(.self$neighbors[[cur]])){
.self$neighbors[[cur]]<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
b$add_neighbors(a)
b
b$neighbors[[1]]
a$neighbors[[1]]
a$max_num_neighbors
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(.self$neighbors[[cur]])){
.self$neighbors[[cur]]<<-node_obj
}else{
cur=cur+1
}
}
}
)
node=setRefClass("node",fields=list(neighbors="list",value="numeric",
max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
.self$value<<-node_value
.self$neighbors<<-vector("list",max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=.self$max_num_neighbors){
if(is.null(.self$neighbors[[cur]])){
.self$neighbors[[cur]]<<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
node=setRefClass("node",fields=list(neighbors="list",value="numeric",
max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
value<<-node_value
neighbors<<-vector("list",max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=max_num_neighbors){
if(is.null(neighbors[[cur]])){
neighbors[[cur]]<<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
a
a$value=5
a
b=node$new(node_value=5)
a$add_neighbors(b)
a
a$neighbors[[1]]
b$add_neighbors(a)
b$neightbors[[1]]
b$neighbors[[1]]
rm(list=ls())
node=setRefClass("node",fields=list(neighbors="list",value="numeric",
max_num_neighbors="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
value<<-node_value
neighbors<<-vector("list",max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
}
)
node$methods(add_neighbors=
function(node_obj){
cur=1
while(cur<=max_num_neighbors){
if(is.null(neighbors[[cur]])){
neighbors[[cur]]<<-node_obj
}else{
cur=cur+1
}
}
}
)
a=node$new(node_value=4)
b=node$new(node_value=5)
a$add_neighbors(b)
b$add_neighbors(a)
b$neighbors[[1]]
a$neighbors
c=node$new(node_value=6)
c$add_neighbors(a)
c
c=node$new(node_value=6)
node=setRefClass("node",fields=list(neighbors="vector",value="numeric",
max_num_neighbors="numeric"),index="numeric")
max_num_neighbors="numeric",index="numeric"))
node=setRefClass("node",fields=list(neighbors="vector",value="numeric",
max_num_neighbors="numeric",index="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4){
value<<-node_value
neighbors<<-vector("numeric",max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
}
)
node$methods(initialize =
function(node_value,max_num_neighbors=4,index_value){
value<<-node_value
neighbors<<-vector("numeric",max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
index_value<<-index$value
}
)
node$methods(initialize =
function(node_value,max_num_neighbors=4,index_value){
value<<-node_value
neighbors<<-vector("numeric",max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
index_value<<-index_value
}
)
node=setRefClass("node",fields=list(neighbors="vector",value="numeric",
max_num_neighbors="numeric",index="numeric"))
node$methods(initialize =
function(node_value,max_num_neighbors=4,index_value){
value<<-node_value
neighbors<<-vector("numeric",max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
index_value<<-index_value
}
)
node$methods(initialize =
function(node_value,max_num_neighbors=4,index_value){
value<<-node_value
neighbors<<-rep(0,max_num_neighbors)
max_num_neighbors<<-max_num_neighbors
index_value<<-index_value
}
)
node$methods(initialize =
function(node_value,max_num_neighbors=4,index_value){
.self$value<<-node_value
.self$neighbors<<-rep(0,max_num_neighbors)
.self$max_num_neighbors<<-max_num_neighbors
.self$index_value<<-index_value
}
)
node$methods(initialize =
function(node_value,max_num_n=4,i_value){
value<<-node_value
neighbors<<-rep(0,max_num_neighbors)
max_num_neighbors<<-max_num_n
index_value<<-i_value
}
)
node$methods(initialize =
function(node_value,max_num_n=4,i_value){
value<<-node_value
neighbors<<-rep(0,max_num_n)
max_num_neighbors<<-max_num_n
index_value<<-i_value
}
)
rm(list=ls())
wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=log(det(X))*((n-p-1)/2)-trace(solve(V,X))/2
return(o)
}
X=matrix(rnorm(10*10),10,10)
dim(X)
V=V+V^T
V=matrix(rnorm(10*10),10,10)
V=V+V^T
V=matrix(rnorm(10*10),10,10)
V=V*V^T+diag(10)
eigen(V)
V=matrix(rnorm(10*10),10,10)
V=V*V^T+diag(10)
eigen(V)$values
V=matrix(rnorm(10*10),10,10)
V=V*V^T
eigen(V)
eigen(V)$values
diag(2)
V=matrix(rnorm(10*10),10,10)
V=V*V^T+10*diag(10)
eigen(V)$values
wishart_log_pdf(X,V,10)
# we don't include normalizing constant
wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=log(det(X))*((n-p-1)/2)-trace(solve(V,X))/2
return(o)
}
wishart_log_pdf(X,V,10)
det(X)
trace(solve(V,X))
solve(V,X)
$trace
help(trace)
# we don't include normalizing constant
wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=log(det(X))*((n-p-1)/2)-sum(diag(solve(V,X)))/2
return(o)
}
wishart_log_pdf(X,V,10)
score_wishart_log_pdf(X,V,N)
score_wishart_log_pdf(X,V,n)
score_wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=((n-p-1)/2)*(solve(X)^T)-0.5*solve(V)^T
return(o)
}
score_wishart_log_pdf(X,V,n)
score_wishart_log_pdf(X,V,10)
factorized_score=function(L,V,n){
p=ncol(V)
((n-p-1)/2)*(solve(L*L^T)^T)%*%L^T-0.5*solve(V)^T%*%2*L^T
}
L=chol(X)
X=rWishart(1,10,V)[[1]]
L=chol(X)
V=matrix(rnorm(10*10),10,10)
# V*V^T makes it symmetric, adding nI makes it pos def.
V=V*V^T+10*diag(10)
X=rWishart(1,10,V)[[1]]
wishart_log_pdf(X,V,10)
solve(V,X)
dim(X)
X=rWishart(1,10,V)
dim(X)
X=rWishart(1,10,V)[,,1]
wishart_log_pdf(X,V,10)
score_wishart_log_pdf(X,V,10)
L=chol(X)
score_wishart_log_pdf(L,V,10)
factorized_log_pdf(X,V,10)
factorized_log_pdf=function(L,V,n){
return(wishart_log_pdf(L*L^T,V,n))
}
factorized_score=function(L,V,n){
p=ncol(V)
((n-p-1)/2)*(solve(L*L^T)^T)%*%L^T-0.5*solve(V)^T%*%2*L^T
}
factorized_log_pdf(X,V,10)
L=chol(X)^T
factorized_log_pdf(X,V,10)
factorized_log_pdf(L,V,10)
L=chol(X)
factorized_log_pdf(L,V,10)
wishart_log_pdf(X,V,10)
L=chol(X)^T
factorized_log_pdf(L,V,10)
exp(-62)
exp(-46)
factorized_log_pdf=function(L,V,n){
return(wishart_log_pdf(L%*%L^T,V,n))
}
factorized_log_pdf(L,V,10)
L=chol(X)
factorized_log_pdf(L,V,10)
sum((L%*%L^T-X)^2)
L=chol(X)
L=chol(X)^T
sum((L%*%L^T-X)^2)
sum((L%*%L'-X)^2)
)
fdafd
=
sum((L%*%t(L)-X)^2)
L=chol(X)^T
L=t(chol(X))
factorized_log_pdf(L,V,10)
sum((L%*%t(L)-X)^2)
factorized_log_pdf=function(L,V,n){
return(wishart_log_pdf(L%*%t(L),V,n))
}
factorized_log_pdf(L,V,10)
wishart_log_pdf(X,V,10)
x=matrix(rnorm(4),2,2)
x
x''
rm(x)
wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=log(det(X))*((n-p-1)/2)-sum(diag(solve(V,X)))/2
return(o)
}
score_wishart_log_pdf=function(X,V,n){
p=ncol(V)
o=((n-p-1)/2)*(solve(X)^T)-0.5*t(solve(V))
return(o)
}
factorized_log_pdf=function(L,V,n){
return(wishart_log_pdf(L%*%t(L),V,n))
}
factorized_score=function(L,V,n){
p=ncol(V)
((n-p-1)/2)*(t(solve(L*t(L))))%*%t(L)-0.5*t(solve(V))%*%2*t(L)
}
# test functions
V=matrix(rnorm(10*10),10,10)
# V*V^T makes it symmetric, adding nI makes it pos def.
V=V*V^T+10*diag(10)
X=rWishart(1,10,V)[,,1]
wishart_log_pdf(X,V,10)
V=matrix(rnorm(10*10),10,10)
# V*t(V) makes it symmetric, adding nI makes it pos def.
V=V*t(V)+10*diag(10)
X=rWishart(1,10,V)[,,1]
wishart_log_pdf(X,V,10)
score_wishart_log_pdf(X,V,10)
L=t(chol(X))
factorized_log_pdf(L,V,10)
set.seed(1)
library(MASS)
mvrnorm(n=1)
mvrnorm(n=1,mu=c(0,0))
mvrnorm(n=1,mu=c(0,0),Sigma=diag(2))
set.seed(1)
mvrnorm(n=1,mu=c(0,0),Sigma=diag(2))
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
mvrnorm(n=1,mu=c(0,0,0),Sigma=diag(3))
set.seed(1)
.Random.seed
which R_system_version()
R_system_version()
which(R)
.libPaths()
library(rstan)
sampling
stan_model
library(mcmcse)
minESS(p = 2000, alpha = .05, eps = .05)
minESS(p = 20000, alpha = .05, eps = .05)
minESS(p = 20000, alpha = .05, eps = .05)
minESS(p = 10, alpha = .05, eps = .05)
.libPaths()
library(rstan)
quit()
library(reticulate)
version
R.home()
library(reticulate)
library(reticulate)
import numpy
import pandas
import("numpy")
X = numpy$load("input_matrix.npy")
numpy = import("numpy")
X = numpy$load("input_matrix.npy")
setwd("~/PycharmProjects/all_code/python2R")
X = numpy$load("input_matrix.npy")
X
dim(X)
print(X[0,3,2])
print(X[2,5,4])
outX = rnorm(10000)
outX = as.array(rnorm(10000),dim=(2,5,1000))
outX = as.array(rnorm(10000),dim=c(2,5,1000))
dim(outX)
outX = array(rnorm(10000),dim=c(2,5,1000))
dim(outX)
numpy$save("matrix_from_R.npy",arr=outX,allow_pickle=False)
numpy$save("matrix_from_R.npy",arr=outX,allow_pickle=F)
numpy$save("matrix_from_R.npy",arr=outX)
